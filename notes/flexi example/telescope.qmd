---
format: html
page-layout: full
column: screen
server: shiny
---

  

```{r, "Run on start, only at server"}
#| context: server-start

```

```{r, "Run on start, at client and server"}
#| context: data
#| include: false
load('flexi_data.RDs')
```


```{r, "Client-side user interface"}
shiny::fluidPage(
  # theme = bslib::bs_theme(
  #   # Colors (background, foreground, primary)
  #   bg = 'white', 
  #   fg = '#2D8E9F', 
  #   primary = colorspace::lighten('#06436e', 0.3),
  #   secondary = '#404040',
  #   # Fonts (Use multiple in case a font cannot be displayed)
  #   base_font = c('Source Sans Pro',  'Lato', 'Merriweather', 'Roboto Regular', 'Cabin Regular'),
  #   heading_font = c('Oleo Script', 'Prata', 'Roboto', 'Playfair Display', 'Montserrat')
    # font_scale = 1.25
  # ),
  shiny::sidebarLayout(
    sidebarPanel = shiny::sidebarPanel(
      shiny::h6(dots$translations$flexi_settings),
      shiny::tabsetPanel(id = 'settings',
                         shiny::tabPanel(title = dots$translations$flexi_basic_settings, 
                                         
       shiny::selectInput(inputId = 'chapter', 
                          label = dots$translations$flexi_input_chapter,
                          choices = unique(chapter_overview$chapter),
                          multiple = TRUE,
                          selectize = TRUE),
       
       shiny::selectInput(inputId = 'dep', 
                          label = dots$translations$flexi_input_dep,
                          choices = NULL,
                          multiple = TRUE,
                          selectize = TRUE),
       
      shiny::selectInput(inputId = 'indep',
                          label = dots$translations$flexi_input_indep,
                          choices = NULL,
                          multiple = FALSE,
                          selectize = TRUE,
                          selected = ''),
      
     shiny::checkboxInput(inputId = 'totals', 
                          label = dots$translations$flexi_totals,
                          value = FALSE),
     
       shiny::selectInput(inputId = 'mesos_group', 
                          label = dots$translations$flexi_input_mesos_group,
                          choices = NULL,
                          selected = NULL,
                          multiple = TRUE,
                          selectize = TRUE)
     ),
     shiny::tabPanel(title = dots$translations$flexi_advanced_settings, 
                     
       shiny::selectInput(inputId = 'plotter', 
                          label = dots$translations$flexi_figure_type,
                          choices = setNames(c('prop', 'freq'), 
                                             c(dots$translations$flexi_figure_type_proportion,
                                               dots$translations$flexi_figure_type_frequency)),
                          selected = 'prop',
                          multiple = FALSE,
                          selectize = TRUE),
       
       shiny::selectInput(inputId = 'data_label', 
                          label = dots$translations$flexi_data_label,
                          choices = setNames(saros::get_data_label_opts(),
                                             c('Andel', 'Prosent', 'Prosent uten symbol', 'Antall', 'Snitt', 'Median')),
                          selected = saros::get_data_label_opts()[2],
                          multiple = FALSE,
                          selectize = TRUE),
       
           shiny::selectInput(inputId = 'showNA', 
                          label = dots$translations$flexi_showNA,
                          choices = setNames(c('never', 'always', 'ifany'),
                                             c('Aldri', 'Alltid', 'Om det finnes')),
                          selected = 'never',
                          multiple = FALSE,
                          selectize = TRUE),
       
           shiny::selectInput(inputId = 'sort_by', 
                          label = dots$translations$flexi_sort_by,
                          choices = setNames(c('.variable_name', '.variable_label',  saros:::.saros.env$summary_data_sort1),
                                             c('Variabelnavn', 'Etikett', 'Øverste', 'Øvre', 'Midten-øvre', 'Nedre', 'Midten-nedre', 'Nederste')),
                          selected = '.upper',
                          multiple = FALSE,
                          selectize = TRUE),
       
           shiny::sliderInput(inputId = 'hide_label_if_prop_below', 
                          label = dots$translations$flexi_hide_label_if_prop_below,
                          value = .01,
                          min = 0, max = 1, step = .01),
       
           shiny::numericInput(inputId = 'digits', 
                          label = dots$translations$flexi_digits,
                          value = 2,
                          min = 0, max = 12, step = 1)
      )
      )
       ),
    mainPanel = shiny::mainPanel(
      shiny::tabsetPanel(id = 'display',
                         shiny::tabPanel(title = dots$translations$flexi_figure, 
                                         ggiraph::girafeOutput('girafe_output'), 
                                         shiny::htmlOutput('plot_caption'),
                                         ggiraph::girafeOutput('girafe_output_others'),
                                         shiny::htmlOutput('plot_caption_others')
                                         ),
                         shiny::tabPanel(title = dots$translations$flexi_table, 
                                         gt::gt_output('gt_output')))
       
    )
  )
)
```




```{r, "Server"}
#| context: server

y_selector_choices <- 
  shiny::reactive(x = {
    choices <- names(data)
    if(is.null(input$chapter)) {
      choices <- names(data)
    } else {
      choices <- unique(chapter_overview[chapter_overview$chapter %in% input$chapter, '.variable_name'][[1]])
    }
   
  choices <- setNames(choices, labelled::var_label(data[, choices]))
  choices
})

shiny::observe({
      # shiny::updateSelectizeInput(inputId = 'chapter',
      #                             choices = unique(chapter_overview$chapter),
      #                     label = dots$translations$flexi_input_chapter)
  

      shiny::updateSelectizeInput(inputId = 'dep',
                                  choices = y_selector_choices(),
                          label = dots$translations$flexi_input_dep)
  
      shiny::updateSelectizeInput(inputId = 'indep',
                          label = dots$translations$flexi_input_indep,
                          choices = setNames(c('', names(data)),
                                             c(dots$translations$flexi_input_indep_none,
                                               labelled::var_label(data))))
      
      shiny::updateSelectizeInput(inputId = 'mesos_group', 
                          label = dots$translations$flexi_input_mesos_group,
                          choices = sort(unique(data[[dots$mesos_var]])))
      
})


data_input <- 
  shiny::reactive(x = {
    check <- rlang::is_character(input$mesos_group)
    data[if(check) data[[dots$mesos_var]] %in% input$mesos_group else TRUE, ]

})

tbl <- shiny::reactive(x = {
  if(!is.null(input$dep)) {
    data <- data_input()
    dots$digits <- input$digits
    data <- 
      saros:::summarize_data(data = data, 
                                  dep = input$dep, 
                                  indep = if(input$indep != '') input$indep, 
                                  !!!dots)
    data <- data[, unlist(lapply(data, function(x) !all(is.na(x))))]
  }
})

caption <- shiny::reactive(x = {
  
    caption <- lapply(input$dep, function(var) {
      attr(data[[var]], 'label')
    })
    caption <- unlist(caption)
    caption <- 
      stringi::stri_replace_all_regex(caption, 
                                      pattern = stringi::stri_c('(.+)', dots$label_separator, '.*', ignore_null = TRUE),
                                    replacement = '$1')
    caption <- stringi::stri_unique(caption)
    if(require(package = 'saros') && !is.null(input$dep)) {
    caption <- saros::create_caption(main_question = caption,
                           data_out = tbl(),
                           indep_pos = if(input$indep != '') attr(data[[input$indep]], 'label'),
                           mesos_group = input$mesos_group,
                           filepath = NULL,
                           translations = dots$translations)
    }
    caption
})


caption_others <- shiny::reactive(x = {

    caption <- lapply(input$dep, function(var) {
      attr(data[[var]], 'label')
    })
    caption <- unlist(caption)
    caption <-
      stringi::stri_replace_all_regex(caption,
                                      pattern = stringi::stri_c('(.+)',
                                                                dots$label_separator, '.*',
                                                                ignore_null = TRUE),
                                    replacement = '$1')
    caption <- stringi::stri_unique(caption)
    if(require(package = 'saros') && !is.null(input$dep)) {
    caption <- saros::create_caption(main_question = caption,
                           data_out = tbl(),
                           indep_pos = if(input$indep != '') attr(data[[input$indep]], 'label'),
                           mesos_group = dots$translations$mesos_label_all_others,
                           filepath = NULL,
                           translations = dots$translations)
    }
    caption
})


output$gt_output <-
  gt::render_gt({
    tbl <- tbl()
    if(!is.null(tbl)) {
    tbl <- dplyr::rename_with(tbl, 
                               .fn =
                                 ~dplyr::case_when(.x == '.variable_name' ~
                                                      dots$translations$flexi_cols_variable_name,
                                                   .x == '.variable_label' ~
                                                     dots$translations$flexi_cols_variable_label,
                                                   .x == '.category' ~
                                                     dots$translations$flexi_cols_category,
                                                   .x == '.count' ~ 
                                                     dots$translations$flexi_cols_count,
                                                   .x == '.count_se' ~
                                                     dots$translations$flexi_cols_count_se,
                                                   .x == '.proportion' ~
                                                     dots$translations$flexi_cols_proportion,
                                                   .x == '.proportion_se' ~
                                                     dots$translations$flexi_cols_proportion_se,
                                                   .x == '.mean' ~ 
                                                     dots$translations$flexi_cols_mean,
                                                   .x == '.mean_se' ~
                                                     dots$translations$flexi_cols_mean_se,
                                                   .x == '.data_label' ~
                                                     dots$translations$flexi_cols_data_label,
                                                   .x == '.comb_categories' ~
                                                     dots$translations$flexi_cols_comb_categories,
                                                   .x == '.sum_value' ~
                                                     dots$translations$flexi_cols_sum_value, 
                                                   .default = .x))
    tbl <- gt::gt(tbl)

    tbl <- gt::tab_caption(tbl, caption = gt::md(caption()))
    }
    
  })

output$girafe_output <- 
   ggiraph::renderGirafe({

   plotter <- if(input$plotter == 'prop') saros::embed_cat_prop_plot else saros::embed_cat_freq_plot
   check_equal_cols <- 
      tryCatch(saros:::check_category_pairs(data, cols_pos = rlang::set_names(input$dep)),
               error = function(e) FALSE)

   
   if(!check_equal_cols) {
      shiny::validate(dots$translations$flexi_validate)
   } else if(rlang::is_character(input$dep) &&
      !any(input$dep %in% input$indep)) {
     
    ggiraph::girafe(ggobj = 
      plotter(data = data_input(),
              dep = tidyselect::all_of(input$dep),
              indep = if(input$indep != '') tidyselect::all_of(input$indep),
              data_label = input$data_label,
              colour_palette = dots$colour_palette,
              showNA = input$showNA,
              totals = input$totals,
              hide_label_if_prop_below = input$hide_label_if_prop_below,
              digits = input$digits,
              data_label_decimal_symbol = dots$data_label_decimal_symbol,
              sort_by = input$sort_by,
              label_separator = dots$label_separator,
              name_separator = dots$name_separator,
              translations = dots$translations)
      )
   }
  })

data_input_others <- 
  shiny::reactive(x = {
    data[!data[[dots$mesos_var]] %in% input$mesos_group, ]
})

output$girafe_output_others <- 
   ggiraph::renderGirafe({
     if(rlang::is_character(input$mesos_group)) {


   plotter <- if(input$plotter == 'prop') saros::embed_cat_prop_plot else saros::embed_cat_freq_plot
   check_equal_cols <- 
      tryCatch(saros:::check_category_pairs(data, cols_pos = rlang::set_names(input$dep)),
               error = function(e) FALSE)

   
   if(!check_equal_cols) {
      shiny::validate(dots$translations$flexi_validate)
   } else if(rlang::is_character(input$dep) &&
      !any(input$dep %in% input$indep)) {
     
    ggiraph::girafe(ggobj = 
      plotter(data = data_input_others(),
              dep = tidyselect::all_of(input$dep),
              indep = if(input$indep != '') tidyselect::all_of(input$indep),
              data_label = input$data_label,
              colour_palette = dots$colour_palette,
              showNA = input$showNA,
              totals = input$totals,
              hide_label_if_prop_below = input$hide_label_if_prop_below,
              digits = input$digits,
              data_label_decimal_symbol = dots$data_label_decimal_symbol,
              sort_by = input$sort_by,
              label_separator = dots$label_separator,
              name_separator = dots$name_separator,
              translations = dots$translations)
      )
   }
     }
  })



output$plot_caption <- 
  shiny::renderText({
    markdown::mark_html(caption(), template = FALSE)
  })

output$plot_caption_others <-
  shiny::renderText({
         if(rlang::is_character(input$mesos_group)) {

    markdown::mark_html(caption_others(), template = FALSE)
         }
  })

```
